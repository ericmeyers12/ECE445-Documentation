//******************************************************************************
//  MSP-EXP432P401R Infantry Identification Friend or Foe Software
//  University of Illinois - ECE445 - Senior Design - Project #11
//  Authors: Eric Meyers and Noah Prince
//  Date(s): Initial Revision (3/15/2016)
//			 Revision 1.1 - New Microprocessor (4/2/2016)
//					- switched from MSP430F2274 to MSP-EXP432P401R - major changes
//  ----------------------------------------------------------------------------
//  FRIENDLY INTERROGATOR UNIT
//
//  Description: This piece of software is meant to control the friendly interrogator unit
//               on the Infantry I.F.F. System. Upon connecting all hardware components correctly
//               this software will generate 40kHz interrupts to send a laser transmission, and
//               then proceed to poll for an acknowledgement from the friendly target unit.
//
//                   J1		     J3			        		J4			J2
//                   --------------				   		    --------------
//            V_IN--|3V3         5V|--X	 	  LASER_TRANS--|P2.7       GND|--GND
//                  |              |               		   |              |
//           	 X--|P6.0       GND|--GND 	 		  V_T--|P2.6      P2.5|--X
//                  |              |			 		   |			  |
//              D0--|P3.2      P6.1|--X	     	   	   A7--|P2.4      P3.0|--X
//                  |              |			  		   |              |
//              D1--|P3.3      P4.0|--X		 	       A6--|P5.6      P5.7|--X
//                  |              |			   		   |              |
//         		D2--|P4.1      P4.2|--X		 	       A5--|P6.6       RST|--X
//                  |              |			  		   |              |
//       	    D3--|P4.3      P4.4|--X			       A4--|P6.7      P1.6|--X
//                  |              |			  		   |              |
//            	D4--|P1.5      P4.5|--X		 	       A3--|P2.3      P1.7|--X
//                  |              |					   |              |
//             	D5--|P4.6      P4.7|--X			       A2--|P5.1      P5.0|--X
//                  |              |		     		   |              |
//     			D6--|P6.5      P5.4|--X	    	       A1--|P3.5      P5.2|--X
//                  |              |			  		   |              |
//       		D7--|P6.4      P5.5|--X	 		       A0--|P3.7      P3.6|--X
//                   --------------							--------------
//
//						P1.0 - POWER_LAS_LED
//						P1.1 - POWER_LAS_RF_BUTTON
//						P1.4 - SYNC BUTTON
//						P2.0 - LED_INDICATOR (Friendly or Enemy)
//
// INPUT GPIO PINS : P2.4, P5.6, P6.6, P6.7, P2.3, P5.1, P3.5, P3.7 = R.F. Address Lines
//                   P3.2, P3.3, P4.1, P4.3, P1.5, P4.6, P6.5, P6.4 = R.F. Data Lines
//                   P1.1 = Power Button for R.F. Receiver and Laser Transmitter
//                   P1.4 = Sync Button to Reset/Sync Clocks
//					 P2.6 = Valid Transmission = to determine when R.F. Signal incoming
//
// OUTPUT GPIO PINS: P1.0 = Power to R.F./Laser Subsystem Indicator
//					 P2.0 = LED Indicator (Friendly or Enemy)
//                   P2.7 = Laser Transmitter Output
//
//  Built with CCE Version: 3.2.2 and IAR Embedded Workbench Version: 4.11B
//******************************************************************************
#include "msp.h"


#define PASSPHRASE 0xB00B //HARDCODED PASSPHRASE - 16 bits
#define UNIT_TEST_LASER_SIG 1

/* ==== Initialize Global Variables ==== */
int seconds = 0; //Seconds Timer
int laser_timer_b_flag = 0;
int ten_sec_timer_a_flag = 0;

int laser_count = 0;

int photo_idx = 0;

uint32_t photo_current[4];

uint32_t photo_values[4][8];
uint32_t photo_binary[4][8];


int main(void) {
	/* ==== Initialize Local Variables ==== */
	int i = 0;                       // loop variable
	int unique_id;                   // unique i.d. to pulse on laser
	int ack_passphrase;              // local ackn passphrase to verify wtih received
	int received_ack_passphrase;     // ack passphrase received from target unit
	char address = 0;                // address line bits (condensed into a single char)
	char start;                      // start bits (4 bits) - to signify to photo receiver on target
	char check_sum;                  // check-sum bits (4 bits) - sum of all address bits

	/* Turn off Watch-Dog Timers */
    WDTCTL = WDTPW | WDTHOLD;


    /* ==== Set Direction of GPIO ==== */
    // PXDIR - BITWISE : 1 OUTPUT 0 INPUT
//    P1DIR &= ~(BIT1 | BIT4 |BIT5); 	//Clear Bits 1, 4, and 5 on P1DIR to set P1.1, P1.4 and P1.5 to input
    P1DIR |= (BIT0|BIT5);  //Set Bit 0 on P1DIR to set P1.0 to output
    //P2DIR |= (BIT0  | BIT6); //Set Bit 0 and 6 on P2DIR to set P2.0 and P2.6 to output
    //P2DIR &= ~(BIT3 | BIT4 | BIT7); //Clear Bit 3, 4, and 7 on P2DIR to set P2.3, P2.4, and P2.7 to intput
//    P3DIR &= ~(BIT2 | BIT3 | BIT5 | BIT7); //Clear Bits 2, 3, 5 and 7 on P3DIR to set P3.2, P3.3, P3.5, and P3.7 to input
//    P4DIR &= ~(BIT1 | BIT3 | BIT6); //Clear Bits 1, 3 and 6 on P4DIR to set P4.1, P4.3, and P4.6 to input
//    P5DIR &= ~(BIT1 | BIT6); //Clear Bits 1 and 6 on P5DIR to set P5.1 and P5.6 to input
//    P6DIR &= ~(BIT4 | BIT5 | BIT6 | BIT7); //Clear Bits 4, 5, 6, and 7 on P6DIR to set P6.4, P6.5, P6.6, and P6.7 to input

    P5->SEL1 |= BIT4;                           // Configure P5.4 for ADC
      P5->SEL0 |= BIT4;


    /* =======Laser Unique I.D. ==========================================
	---------------------------------------------------------------------
	| ST_B3 | ST_B2 | ST_B1 | ST_B0 | A7 ... A0 | CS3 | CS2 | CS1 | CS0 |
	---------------------------------------------------------------------
	with ST_B3 - ST_B0 = Start Bits (Logic Highs (1s))
	   	 A7 - A0 = R.F. Address Lines (Depending on 8-Pin DIP Switch)
	     CS3 - CS0 = CheckSum Bits (A7+A6+...+A1+A0)
	======================================================================*/
	//Combine address into single char, set start bits to all high - P2.4, P5.6, P6.6, P6.7, P2.3, P5.1, P3.5, P3.7
	address |= ((P2IN & (BIT3 | BIT4)) | (P3IN & (BIT5 | BIT7)) | (P5IN & (BIT1 | BIT6)) | (P6IN & (BIT6 | BIT7)));
	start = 0x0F; //Start signifier (1111)

	//calculate check-sum bits based off of how many ones in unique i.d.
	for(; i < 8; i++)
		  check_sum += (address>>i) & BIT0;

	//shift bits properly to set the unique_id upon starting
	unique_id = (start << 12) | (address << 4) | check_sum;


	/* ============ Setup Timers ===========================================*/
	//Setup Timer A1 to perform 1 Hz interrupts (for seconds counter) - 1s
    TA0CCTL0 = CCIE;	// TACCR0 interrupt enabled
    TA0CCR0 = 500;	// Set count limit (32.768kHz Clock 32,768/32,768 = 1 tick/second)
    TA0CTL = TASSEL__SMCLK | MC__UP;	// ACLK, continuous mode (VERIFY SPEED)


    //Setup Timer A1 to perform 40 kHz interrupts (for laser) -  25us
    TA1CCTL0 = CCIE; //Enable counter interrupts
    TA1CCR0 = 32678; // Set count limit (3 MHz Clock = 3,000,000/75 = 40,000 ticks until one interrupt is registered)
    TA1CTL = TASSEL__ACLK | MC__CONTINUOUS; //Timer A0 with SMCLK @ 40kHz @ 3.0V(VERIFY), count up.

    /*===SAMPLING INITIALIZATION Sampling time, S&H=16, ADC14 on ====*/
	ADC14->CTL0 = ADC14_CTL0_SHT0_2 | ADC14_CTL0_SHP | ADC14_CTL0_ON;
	ADC14->CTL1 = ADC14_CTL1_RES_2;         // Use sampling timer, 12-bit conversion results

	ADC14->MCTL[0] |= ADC14_MCTLN_INCH_1;   // A1 ADC input select; Vref=AVCC
	ADC14->IER0 |= ADC14_IER0_IE0;          // Enable ADC conv complete interrupt

	/*==============================================================*/

    __enable_interrupt();
    NVIC->ISER[0] = 1 << ((TA0_0_IRQn) & 31);
    NVIC->ISER[0] = 1 << ((ADC14_IRQn) & 30);
    NVIC->ISER[0] = 1 << ((TA1_0_IRQn) & 29);

	/*===== DEBUGGING - UNIT TEST FOR LASER SIGNAL - must be 40kHz */
	#if UNIT_TEST_LASER_SIG
	while(1) {
		while (!/*ten_sec_timer_a_flag*/laser_timer_b_flag);    //wait for 3kHz signal
		/*ten_sec_timer_a_flag*/laser_timer_b_flag = 0;         //reset flag
//		P1OUT ^= BIT0;
		P1OUT ^= BIT5;                  //toggle P1.0 on MSP
//		printf("ADC 14: %d", ADC14->MEM[0]);
//		 for (i = 200; i > 0; i--);          // Delay
		  // Start sampling/conversion
		photo_values[0][++photo_idx] = photo_current[0];

	    if (photo_current[0] >= 0x999){             // ADC12MEM0 = A1 > 0.5AVcc?
	      P1->OUT |= BIT0;                   // P1.0 = 1
	      photo_binary[0][photo_idx-1] = 1;
	    }
	      else{
	      P1->OUT &= ~BIT0;                     	// P1.0 = 0
	    photo_binary[0][photo_idx-1] = 1;
	      }

		uint32_t i[8] = photo_binary[0];
		if(photo_idx == 8) {
			int j = 0; // useless shit

		}

		  ADC14->CTL0 |= ADC14_CTL0_ENC | ADC14_CTL0_SC;// P1.0 = 0
	}
	#endif
	/*============================================================*/

	/* ==== Main Loop (Perform pulsing, poll for response?) ==== */
	while (1) {
		/* UPDATE ACKNOWLEDGEMENT PASSPHRASE */
		if (ten_sec_timer_a_flag) {
			ten_sec_timer_a_flag = 0;
			ack_passphrase = PASSPHRASE | seconds; //NO ENCRYPTION YET - simply 0xXXXX or'd w/ seconds count
		}

		/* IF OPERATOR TURNED LASER/RECEIVER ON, BEGIN PULSING/CHECKING RECEIVED ACK*/
		while (P1IN & BIT1)  {
			/* PULSE UNIQUE ID, CHECK VALID TRANSMISSION SIGNAL*/
			for (i = 0; i < 16; i ++) {
				while (!laser_timer_b_flag);    //wait for 40kHz signal
				laser_timer_b_flag = 0;         //reset flag

				//Turn P2.2 ON or OFF depending on state of unique I.D.
				((unique_id >> i) & BIT0) ? (P2OUT |= BIT6) : (P2OUT &= ~(BIT6));
			}

			/*CHECK R.F. RECEIVER VALID TRANSMISSION (V_T) SIGNAL*/
			if (P2IN & BIT7) {
				//Get 1st set of data bits from receiver on P3.0 - P3.7 - MSB
				received_ack_passphrase |= ((BIT0/*CHANGE TO NEW BITS*/) << 8);

				for (i=0; i < 10000; i++); //DELAY - this probably will not work, need to figure out anohter way

				//Get 2nd set of data bits from receiver on P3.0 - P3.7 - LSB
				received_ack_passphrase |=((BIT0/*CHANGE TO NEW BITS*/));

				//Verify with our local copy
				if (received_ack_passphrase == ack_passphrase)
					//TURN ON INDICATION LED!! (FRIENDLY TARGET IDENTIFIED)
					P2OUT |= BIT0;
			}
		}
	}
}


/*  ISR : Timer_A0
 *  Description: This timer acts as our "RTC" and increments the "seconds" variable every second,
 *  and also depending on the value of "seconds" it sets the ten_sec_timer_a_flag.
 */
void TA0_0_IRQHandler(void) {
	TA0CCTL0 &= ~CCIFG;	//Reset interrupt flag
//	TA0CCR0 += 10;
    seconds++;
    ten_sec_timer_a_flag = (seconds % 10 == 0);
    laser_timer_b_flag = 1;
}

/*  ISR : Timer_A1
 *  Description: This timer is for the laser transmitter to send the friendly target its unique I.D.
 *  at a rate of 40kHz (25us).
 */
void TA1_0_IRQHandler(void) {
	TA1CCTL0 &=- ~CCIFG;
	TA1CCR0 += 32768;
	laser_timer_b_flag = 1; //Set the laser_timer_b_flag to 1
}


void ADC14_IRQHandler(void) {
	photo_current[0] = ADC14->MEM[0];
}

